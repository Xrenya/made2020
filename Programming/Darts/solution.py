"""
Условия

Если задача не отображается, то вы либо не авторизованы, либо не нажали кнопку кнопку «принять участие» на этой странице.

Для 1-го теста на мишени всегда назначен черный сектор.
Для 2-го теста на мишенях черный сектор может назначаться, а может и не назначаться.

Игра в Дартс 3000 проходит следующим образом.

На круглой мишени изначально N секторов. В начале игры для каждого сектора ведущий записывает баллы. Баллы сектора могут быть как положительными, так и отрицательными. Также, по своему усмотрению, ведущий может назначить один произвольный сектор специальным черным сектором (важно — ведущий может и не назначать черный сектор вообще).
Далее каждому игроку выдается ровно 2 дротика — красный и синий. В свой ход игрок бросает оба дротика в мишень. Результатом его броска считается сумма баллов на секторах, которые идут от красного сектора (сектор, в который игрок попал красным дротиком) до синего сектора (сектор, в который игрок попал синим дротиком) по часовой стрелке. Красный и синий сектор также включаются в эту сумму.

    Если игрок попал дротиками в один сектор, то его результат — это просто баллы на этом одном секторе, а не сумма на всей мишени.
    Если в этом промежутке от красного до синего сектора (включая красный и синий) встретился черный сектор, то тогда результат игрока считается равным 0.

Побеждает в раунде тот, кто после броска набрал максимальный результат.

Ваша задача — для данной мишени определить максимальный возможный результат, который может получить игрок.



Формат входных данных

Первая строка теста содержит одно целое число x — количество наборов входных данных. После следуют x наборов данных.
В первой строке набора записаны два числа, разделенные пробелом: N и K.

N — количество секторов на мишени. K — номер сектора, который был назначен черным. Сектора нумеруются с 0. Если K = -1, то это означает, что в этом раунде ведущий не назначил черный сектор.
Во второй строке набора записано N чисел, разделенных пробелом — баллы за сектора. Сектора указаны по часовой стрелке начиная с нулевого сектора. Важно отметить, что число K означает номер сектора именно в указанном порядке.
Формат выходных данных

Для каждого набора данных необходимо вывести одно число (каждое на отдельной строке) — максимальный результат, который может получить игрок.

"""
import sys


def kadane(A):

    # stores maximum sum sublist found so far
    max_so_far = 0

    # stores maximum sum of sublist ending at current position
    max_ending_here = 0

    # traverse the given list
    for i in range(len(A)):

        # update maximum sum of sublist "ending" at index i (by adding
        # current element to maximum sum ending at previous index i-1)
        max_ending_here = max_ending_here + A[i]

        # if maximum sum is negative, set it to 0 (which represents
        # an empty sublist)
        max_ending_here = max(max_ending_here, 0)

        # update result if current sublist sum is found to be greater
        max_so_far = max(max_so_far, max_ending_here)

    return max_so_far


# Function to find maximum sum circular sublist in a given list
def solve(A, k=-1):
    if k != -1:
        A = A[k+1:] + A[:k]
        return kadane(A)

    # negate all elements of the list
    for i in range(len(A)):
        A[i] = -A[i]

    # run Kadane's algorithm on modified list
    negMaxSum = kadane(A)

    # restore the list
    for i in range(len(A)):
        A[i] = -A[i]

    return max(kadane(A), sum(A) + negMaxSum)


def main():
    num_iter = int(sys.stdin.readline())

    for n_iter in range(num_iter):
        n, k = map(int, sys.stdin.readline().split())
        sectors = list(map(int, sys.stdin.readline().split()))
        ans = solve(sectors, k)
        print(ans)


if __name__ == '__main__':
    main()